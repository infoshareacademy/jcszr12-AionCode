// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Database.Entities.IngredientDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Calories")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Carbohydrates")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Fats")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GI")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Proteins")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserCookBookId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCookBookId");

                    b.ToTable("IngredientDetails", (string)null);
                });

            modelBuilder.Entity("Database.Entities.IngredientUsed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("date");

                    b.Property<int?>("IngredientDetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeDetailsId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IngredientDetailsId");

                    b.HasIndex("RecipeDetailsId");

                    b.ToTable("IngredientUsed", (string)null);
                });

            modelBuilder.Entity("Database.Entities.MealDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Day")
                        .HasColumnType("date");

                    b.Property<int?>("UserCookBookId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCookBookId");

                    b.ToTable("MealDay", (string)null);
                });

            modelBuilder.Entity("Database.Entities.RecipeDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("date");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserCookBookId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCookBookId");

                    b.ToTable("RecipeDetails", (string)null);
                });

            modelBuilder.Entity("Database.Entities.RecipeUsed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("date");

                    b.Property<int?>("MealDayId")
                        .HasColumnType("int");

                    b.Property<string>("PartOfDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecipeDetailsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MealDayId");

                    b.HasIndex("RecipeDetailsId");

                    b.ToTable("RecipeUsed", (string)null);
                });

            modelBuilder.Entity("Database.Entities.UserCookBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("binary");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("userCookBook", (string)null);
                });

            modelBuilder.Entity("Database.Entities.IngredientDetails", b =>
                {
                    b.HasOne("Database.Entities.UserCookBook", "UserCookBook")
                        .WithMany("IngredientsDetails")
                        .HasForeignKey("UserCookBookId");

                    b.Navigation("UserCookBook");
                });

            modelBuilder.Entity("Database.Entities.IngredientUsed", b =>
                {
                    b.HasOne("Database.Entities.IngredientDetails", "IngredientDetails")
                        .WithMany("IngredientsUsed")
                        .HasForeignKey("IngredientDetailsId");

                    b.HasOne("Database.Entities.RecipeDetails", "RecipeDetails")
                        .WithMany("IngredientsUsed")
                        .HasForeignKey("RecipeDetailsId");

                    b.Navigation("IngredientDetails");

                    b.Navigation("RecipeDetails");
                });

            modelBuilder.Entity("Database.Entities.MealDay", b =>
                {
                    b.HasOne("Database.Entities.UserCookBook", "UserCookBook")
                        .WithMany("MealDays")
                        .HasForeignKey("UserCookBookId");

                    b.Navigation("UserCookBook");
                });

            modelBuilder.Entity("Database.Entities.RecipeDetails", b =>
                {
                    b.HasOne("Database.Entities.UserCookBook", "UserCookBook")
                        .WithMany("RecipesDetails")
                        .HasForeignKey("UserCookBookId");

                    b.Navigation("UserCookBook");
                });

            modelBuilder.Entity("Database.Entities.RecipeUsed", b =>
                {
                    b.HasOne("Database.Entities.MealDay", "MealDay")
                        .WithMany("RecipesUsed")
                        .HasForeignKey("MealDayId");

                    b.HasOne("Database.Entities.RecipeDetails", "RecipeDetails")
                        .WithMany("RecipesUsed")
                        .HasForeignKey("RecipeDetailsId");

                    b.Navigation("MealDay");

                    b.Navigation("RecipeDetails");
                });

            modelBuilder.Entity("Database.Entities.IngredientDetails", b =>
                {
                    b.Navigation("IngredientsUsed");
                });

            modelBuilder.Entity("Database.Entities.MealDay", b =>
                {
                    b.Navigation("RecipesUsed");
                });

            modelBuilder.Entity("Database.Entities.RecipeDetails", b =>
                {
                    b.Navigation("IngredientsUsed");

                    b.Navigation("RecipesUsed");
                });

            modelBuilder.Entity("Database.Entities.UserCookBook", b =>
                {
                    b.Navigation("IngredientsDetails");

                    b.Navigation("MealDays");

                    b.Navigation("RecipesDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
